#include <bits/stdc++.h> 
class Deque
{
public:
    // Initialize your data structure.
    int N;
    vector<int>v;
    int f=-1,r=-1;
    Deque(int n)
    {
        N=n;
        for(int i=0;i<n;i++)
        v.push_back(0);
        // Write your code here.
    }

    // Pushes 'X' in the front of the deque. Returns true if it gets pushed into the deque, and false otherwise.
    bool pushFront(int x)
    {
        // Write your code here.
        if(isFull())
        return false;
        if(f==-1 || r==-1)
        {
            f =0;
            r=0;
            v[f]=x;
        }
        else if(f==0)
        {
            f = N-1;
            v[f]=x;
        }
        else
        {
            f = (f-1)%N;
            v[f]=x;
        }
        return true;
    }

    // Pushes 'X' in the back of the deque. Returns true if it gets pushed into the deque, and false otherwise.
    bool pushRear(int x)
    {
        // Write your code here.
        if(isFull())
        return false;
        if(f==-1 || r==-1)
        {
            f =0;
            r=0;
            v[r]=x;
        }
        else
        {
             r =(r+1)%N;
             v[r]=x;
        }
        return true;

    }

    // Pops an element from the front of the deque. Returns -1 if the deque is empty, otherwise returns the popped element.
    int popFront()
    {
        // Write your code here.
        if(isEmpty())
        return -1;
        int x = v[f];
        if(f==r)
        {
            f=-1;
            r=-1;
        }
        else
        f = (f+1)%N;

        return x;
    }

    // Pops an element from the back of the deque. Returns -1 if the deque is empty, otherwise returns the popped element.
    int popRear()
    {
        // Write your code here.
         if(isEmpty())
        return -1;
        int x = v[r];
        if(f==r)
        {
            f=-1;
            r=-1;
        }
        else if(r==0)
        {
            r = N-1;
        }
        else
        r = (r-1)%N;

        return x;
    }

    // Returns the first element of the deque. If the deque is empty, it returns -1.
    int getFront()
    {
        if(isEmpty())
        return -1;
        return v[f];
        // Write your code here.
    }

    // Returns the last element of the deque. If the deque is empty, it returns -1.
    int getRear()
    {
        if(isEmpty())
        return -1;
        return v[r];
        // Write your code here.
    }

    // Returns true if the deque is empty. Otherwise returns false.
    bool isEmpty()
    {
        // Write your code here.
        if(f==-1 || r==-1)
        return true;
        else
        return false;
    }

    // Returns true if the deque is full. Otherwise returns false.
    bool isFull()
    {
        if((r+1)%N == f)
        return true;
        else
        return false;
        // Write your code here.
    }
};
