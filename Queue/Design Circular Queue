class MyCircularQueue {
public:
    int n;
    vector<int>v;
    int f=-1,r=-1;
    MyCircularQueue(int k) {
        n=k;
        for(int i=0;i<n;i++)
            v.push_back(0);
    }
    
    bool enQueue(int x) {
        if(isFull())
        return false;
        if(f==-1 || r==-1)
        {
            f =0;
            r=0;
            v[r]=x;
        }
        else
        {
            r = (r+1)%n;
            v[r]=x;
        }
        
        return true;
    }
    
    bool deQueue() {
       if(isEmpty())
        return false;
        
        if(f==r)
        {
            f=-1;
            r=-1;
        }
        
        else
        f = (f+1)%n;

        return true; 
    }
    
    int Front() {
       if(isEmpty())
        return -1;
        return v[f]; 
    }
    
    int Rear() {
        if(isEmpty())
        return -1;
        return v[r];
    }
    
    bool isEmpty() {
        if(f==-1 || r==-1)
        return true;
        else
        return false;
    }
    
    bool isFull() {
         if((r+1)%n == f)
        return true;
        else
        return false;
    }
};

